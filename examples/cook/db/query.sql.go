// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const addCharacter = `-- name: AddCharacter :one
INSERT INTO characters (result)
VALUES (?)
RETURNING id
`

func (q *Queries) AddCharacter(ctx context.Context, result string) (int64, error) {
	row := q.db.QueryRowContext(ctx, addCharacter, result)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addIngredient = `-- name: AddIngredient :one
INSERT INTO ingredients (name, amount)
VALUES (?, ?)
RETURNING id
`

type AddIngredientParams struct {
	Name   string `json:"name"`
	Amount string `json:"amount"`
}

func (q *Queries) AddIngredient(ctx context.Context, arg AddIngredientParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addIngredient, arg.Name, arg.Amount)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addJoke = `-- name: AddJoke :one
INSERT INTO jokes (text)
VALUES (?)
RETURNING id
`

func (q *Queries) AddJoke(ctx context.Context, text string) (int64, error) {
	row := q.db.QueryRowContext(ctx, addJoke, text)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addResource = `-- name: AddResource :one
INSERT INTO resources (key, value)
VALUES (?, ?)
RETURNING id
`

type AddResourceParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) AddResource(ctx context.Context, arg AddResourceParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addResource, arg.Key, arg.Value)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAllCharacter = `-- name: DeleteAllCharacter :exec
DELETE
FROM characters
`

func (q *Queries) DeleteAllCharacter(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCharacter)
	return err
}

const deleteAllIngredients = `-- name: DeleteAllIngredients :exec
DELETE
FROM ingredients
`

func (q *Queries) DeleteAllIngredients(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllIngredients)
	return err
}

const deleteAllJokes = `-- name: DeleteAllJokes :exec
DELETE
FROM jokes
`

func (q *Queries) DeleteAllJokes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllJokes)
	return err
}

const deleteAllResources = `-- name: DeleteAllResources :exec
DELETE
FROM resources
`

func (q *Queries) DeleteAllResources(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllResources)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT id, session_id, result
FROM characters
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetCharacter(ctx context.Context) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter)
	var i Character
	err := row.Scan(&i.ID, &i.SessionID, &i.Result)
	return i, err
}

const getIngredient = `-- name: GetIngredient :one
SELECT id, session_id, name, amount
FROM ingredients
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetIngredient(ctx context.Context) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const getJokes = `-- name: GetJokes :many
SELECT id, session_id, text
FROM jokes
ORDER BY id DESC
`

func (q *Queries) GetJokes(ctx context.Context) ([]Joke, error) {
	rows, err := q.db.QueryContext(ctx, getJokes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Joke
	for rows.Next() {
		var i Joke
		if err := rows.Scan(&i.ID, &i.SessionID, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResources = `-- name: GetResources :many
SELECT id, session_id, "key", value
FROM resources
`

func (q *Queries) GetResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, getResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Key,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeJoke = `-- name: RemoveJoke :exec
DELETE
FROM jokes
WHERE id = ?
`

func (q *Queries) RemoveJoke(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, removeJoke, id)
	return err
}
